import os
import json
import asyncio
from aiohttp import ClientTimeout
from datetime import datetime
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import FSInputFile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

import gspread
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = '7819266341:AAGR7hA37YWnTv6Ptc8sh9HSgFdgxGJNGe8'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
def get_google_sheet(sheet_name="users"):
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    client = gspread.authorize(creds)
    sheet = client.open(sheet_name).sheet1
    return sheet

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_user_authorized(username: str) -> bool:
    sheet = get_google_sheet()
    authorized_users = sheet.col_values(1)  # –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (A)
    return username in authorized_users

# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
async def send_welcome(message: types.Message):
    username = f"@{message.from_user.username}"

    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {username}! –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø...")

    if is_user_authorized(username):
        await message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!\n\n"
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
            "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            "üëá –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ."
        )

        await asyncio.sleep(1.0)

        # üëá –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –∫–∞–∫ video
        try:
            print("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ video")
            video = FSInputFile("welcome.mp4")
            await message.answer_video(
                video,
                caption="üé• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ!",
                width=720,
                height=1280,
                supports_streaming=False
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

        await asyncio.sleep(1.0)

        # üëá –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üß† –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                web_app=WebAppInfo(url="https://bucolic-dasik-c35220.netlify.app/")
            )]
        ])
        await message.answer("üìò –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:", reply_markup=keyboard)

    else:
        help_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])

        await message.answer(
            "‚õîÔ∏è –£–≤—ã, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
            "üëá –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.",
            reply_markup=help_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def start_training(callback: types.CallbackQuery):
    await callback.message.answer("üìò –û—Ç–ª–∏—á–Ω–æ! –û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å. –ì–æ—Ç–æ–≤—å—Å—è —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ üí°")
    await callback.answer()  # –ó–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

# –ö–Ω–æ–ø–∫–∞ —Ö–µ–ª–ø
async def show_help(callback: types.CallbackQuery):
    print("üîî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_help —Å—Ä–∞–±–æ—Ç–∞–ª!")
    await callback.message.answer(
        "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞:*\n\n"
        "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ:\n\n"
        "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –î–µ–Ω–∏—Å—É –ê—Ö–º–µ—Ä–æ–≤—É](https://t.me/Kidisildur1).\n"
        "2. –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ‚Äî —Å–æ–æ–±—â–∏—Ç–µ. –ú—ã –ø–æ–º–æ–∂–µ–º üòä",
        parse_mode="Markdown"
    )
    await callback.answer()

async def process_webapp_data(message: types.Message):
    print("üì© –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    if message.web_app_data:
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:", message.web_app_data.data)

        data = json.loads(message.web_app_data.data)
        equipment = data.get("equipment")
        score = data.get("score")
        passed = data.get("passed")

        username = f"@{message.from_user.username}"
        full_name = message.from_user.full_name
        status = "–ü—Ä–æ–π–¥–µ–Ω–æ" if passed else "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
        date_str = datetime.now().strftime("%Y-%m-%d %H:%M")

        sheet = get_google_sheet("results")
        sheet.append_row([username, full_name, equipment, score, status, date_str])

        await message.answer(
            f"üìò –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment}\n"
            f"üíØ –ë–∞–ª–ª—ã: {score}\n"
            f"{'‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' if passed else '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'}"
        )
    else:
        print("‚ö†Ô∏è message.web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç WebApp –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")

async def debug_all(message: types.Message):
    print("‚ö†Ô∏è DEBUG: –ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)

# –≠—Ö–æ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(message: types.Message):
    print("ü™µ DEBUG MESSAGE:", message)
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

async def check_table(message: types.Message):
    try:
        sheet = get_google_sheet("results")
        values = sheet.get_all_values()
        await message.answer(f"üìÑ –¢–∞–±–ª–∏—Ü–∞ 'results' –Ω–∞–π–¥–µ–Ω–∞!\n–°—Ç—Ä–æ–∫: {len(values)}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ:\n{e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(send_welcome, Command(commands=["start"]))
    dp.callback_query.register(start_training, lambda c: c.data == "start_training")
    dp.callback_query.register(show_help, lambda c: c.data == "show_help")
    dp.message.register(process_webapp_data, lambda msg: msg.web_app_data)
    dp.message.register(check_table, Command(commands=["check_table"]))
    # dp.message.register(debug_all)
    dp.message.register(echo)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    session = AiohttpSession(timeout=60)  # üëà –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
    bot = Bot(token=API_TOKEN, session=session)
    dp = Dispatcher()
    register_handlers(dp)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())